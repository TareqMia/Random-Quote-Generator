{"version":3,"sources":["components/QuoteMachine.js","App.js","serviceWorker.js","index.js"],"names":["QuoteMachine","selectedQuote","assignNewQuoteIndex","Card","CardContent","Typography","id","quote","author","CardActions","Button","size","onClick","IconButton","target","href","encodeURI","icon","faTwitter","App","props","state","quotes","selectedQuoteIndex","selectQuoteIndex","bind","fetch","then","data","json","setState","console","log","this","length","random","Grid","className","classes","container","justify","xs","lg","item","Number","isInteger","Component","withStyles","display","height","alignItems","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"uUAkCeA,EAzBM,SAAC,GAA4C,IAA1CC,EAAyC,EAAzCA,cAAeC,EAA0B,EAA1BA,oBACtC,OACC,kBAACC,EAAA,EAAD,KACC,kBAACC,EAAA,EAAD,KACC,kBAACC,EAAA,EAAD,CAAYC,GAAG,QACbL,EAAcM,MACf,6BAFD,KAES,0BAAMD,GAAG,UAAUL,EAAcO,UAG3C,kBAACC,EAAA,EAAD,KACC,kBAACC,EAAA,EAAD,CAAQJ,GAAG,YAAYK,KAAK,QAAQC,QAASV,GAA7C,aAGA,kBAACW,EAAA,EAAD,CACCP,GAAG,cACHQ,OAAO,SACPC,KAAMC,UAAU,yCAAD,OAA0Cf,EAAcM,SAEvE,kBAAC,IAAD,CAAiBU,KAAMC,IAAWP,KAAK,W,+BCZtCQ,E,kDACL,WAAYC,GAAQ,IAAD,8BAClB,gBACKC,MAAQ,CACZC,OAAQ,GACRC,mBAAoB,MAErB,EAAKC,iBAAmB,EAAKA,iBAAiBC,KAAtB,gBACxB,EAAKvB,oBAAsB,EAAKA,oBAAoBuB,KAAzB,gBAPT,E,gEAUE,IAAD,OACnBC,MACC,yIAECC,MAAK,SAACC,GAAD,OAAUA,EAAKC,UACpBF,MAAK,SAACL,GAAD,OAAY,EAAKQ,SAAS,CAAER,UAAU,EAAKpB,0B,8CAYlD6B,QAAQC,IAAI,W,yCAIZ,GAAKC,KAAKZ,MAAMC,OAAOY,OAGvB,OAAOC,iBAAO,EAAGF,KAAKZ,MAAMC,OAAOY,OAAS,K,4CAI5CD,KAAKH,SAAS,CAAEP,mBAAoBU,KAAKT,uB,+BAIzC,OACC,kBAACY,EAAA,EAAD,CAAMC,UAAWJ,KAAKb,MAAMkB,QAAQC,UAAWjC,GAAG,YAAYkC,QAAQ,SAASD,WAAS,GACvF,kBAACH,EAAA,EAAD,CAAMK,GAAI,GAAIC,GAAI,EAAGC,MAAI,GACvBV,KAAKhC,cACL,kBAAC,EAAD,CACCA,cAAegC,KAAKhC,cACpBC,oBAAqB+B,KAAK/B,sBAExB,S,oCA/BP,GAAK+B,KAAKZ,MAAMC,OAAOY,QAAWU,OAAOC,UAAUZ,KAAKZ,MAAME,oBAI9D,OAAOU,KAAKZ,MAAMC,OAAOW,KAAKZ,MAAME,wB,GAxBpBuB,aA0DHC,cAlEA,CACdR,UAAW,CACVS,QAAS,OACTC,OAAQ,QACRC,WAAY,WA8DCH,CAAmB5B,GC7DdgC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBpC,MAAK,SAAAqC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLpC,QAAQoC,MAAMA,EAAMC,c","file":"static/js/main.3e3c1626.chunk.js","sourcesContent":["import React from 'react';\nimport Button from '@material-ui/core/Button';\nimport Card from '@material-ui/core/Card';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport Typography from '@material-ui/core/Typography';\nimport IconButton from '@material-ui/core/IconButton';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faTwitter } from '@fortawesome/free-brands-svg-icons';\nconst QuoteMachine = ({ selectedQuote, assignNewQuoteIndex }) => {\n\treturn (\n\t\t<Card>\n\t\t\t<CardContent>\n\t\t\t\t<Typography id=\"text\">\n\t\t\t\t\t{selectedQuote.quote}\n\t\t\t\t\t<br />- <span id=\"author\">{selectedQuote.author}</span>\n\t\t\t\t</Typography>\n\t\t\t</CardContent>\n\t\t\t<CardActions>\n\t\t\t\t<Button id=\"new-quote\" size=\"small\" onClick={assignNewQuoteIndex}>\n\t\t\t\t\tNew Quote\n\t\t\t\t</Button>\n\t\t\t\t<IconButton\n\t\t\t\t\tid=\"tweet-quote\"\n\t\t\t\t\ttarget=\"_blank\"\n\t\t\t\t\thref={encodeURI(`https://twitter.com/intent/tweet?text=${selectedQuote.quote}`)}\n\t\t\t\t>\n\t\t\t\t\t<FontAwesomeIcon icon={faTwitter} size=\"md\" />\n\t\t\t\t</IconButton>\n\t\t\t</CardActions>\n\t\t</Card>\n\t);\n};\n\nexport default QuoteMachine;\n","import React, { Component } from 'react';\nimport QuoteMachine from './components/QuoteMachine';\nimport { random } from 'lodash';\nimport 'typeface-roboto';\nimport Grid from '@material-ui/core/Grid';\nimport { withStyles } from '@material-ui/core/styles';\n\nconst styles = {\n\tcontainer: {\n\t\tdisplay: 'flex',\n\t\theight: '100vh',\n\t\talignItems: 'center'\n\t}\n};\n\nclass App extends Component {\n\tconstructor(props) {\n\t\tsuper();\n\t\tthis.state = {\n\t\t\tquotes: [],\n\t\t\tselectedQuoteIndex: null\n\t\t};\n\t\tthis.selectQuoteIndex = this.selectQuoteIndex.bind(this);\n\t\tthis.assignNewQuoteIndex = this.assignNewQuoteIndex.bind(this);\n\t}\n\n\tcomponentDidMount() {\n\t\tfetch(\n\t\t\t'https://gist.githubusercontent.com/natebass/b0a548425a73bdf8ea5c618149fe1fce/raw/f4231cd5961f026264bb6bb3a6c41671b044f1f4/quotes.json'\n\t\t)\n\t\t\t.then((data) => data.json())\n\t\t\t.then((quotes) => this.setState({ quotes }, this.assignNewQuoteIndex));\n\t}\n\n\tget selectedQuote() {\n\t\tif (!this.state.quotes.length || !Number.isInteger(this.state.selectedQuoteIndex)) {\n\t\t\treturn;\n\t\t}\n\n\t\treturn this.state.quotes[this.state.selectedQuoteIndex];\n\t}\n\n\tnextQuoteClickHandler() {\n\t\tconsole.log('check');\n\t}\n\n\tselectQuoteIndex() {\n\t\tif (!this.state.quotes.length) {\n\t\t\treturn;\n\t\t}\n\t\treturn random(0, this.state.quotes.length - 1);\n\t}\n\n\tassignNewQuoteIndex() {\n\t\tthis.setState({ selectedQuoteIndex: this.selectQuoteIndex() });\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<Grid className={this.props.classes.container} id=\"quote-box\" justify=\"center\" container>\n\t\t\t\t<Grid xs={11} lg={8} item>\n\t\t\t\t\t{this.selectedQuote ? (\n\t\t\t\t\t\t<QuoteMachine\n\t\t\t\t\t\t\tselectedQuote={this.selectedQuote}\n\t\t\t\t\t\t\tassignNewQuoteIndex={this.assignNewQuoteIndex}\n\t\t\t\t\t\t/>\n\t\t\t\t\t) : null}\n\t\t\t\t</Grid>\n\t\t\t</Grid>\n\t\t);\n\t}\n}\n\nexport default withStyles(styles)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}